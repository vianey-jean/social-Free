
const fs = require('fs').promises;
const path = require('path');
const axios = require('axios');
const { initDB, users, posts } = require('./index');

// URLs d'images al√©atoires pour les avatars et les publications
const AVATAR_URLS = [
  'https://i.pravatar.cc/150?img=1',
  'https://i.pravatar.cc/150?img=2',
  'https://i.pravatar.cc/150?img=3',
  'https://i.pravatar.cc/150?img=4',
  'https://i.pravatar.cc/150?img=5',
  'https://i.pravatar.cc/150?img=6',
  'https://i.pravatar.cc/150?img=7',
  'https://i.pravatar.cc/150?img=8',
];

const POST_IMAGE_URLS = [
  'https://picsum.photos/seed/post1/800/600',
  'https://picsum.photos/seed/post2/800/600',
  'https://picsum.photos/seed/post3/800/600',
  'https://picsum.photos/seed/post4/800/600',
  'https://picsum.photos/seed/post5/800/600',
  'https://picsum.photos/seed/post6/800/600',
  'https://picsum.photos/seed/post7/800/600',
  'https://picsum.photos/seed/post8/800/600',
];

// Donn√©es pour les utilisateurs
const userData = [
  { firstName: 'Jean', lastName: 'Dupont', gender: 'male', birthYear: 1985 },
  { firstName: 'Marie', lastName: 'Martin', gender: 'female', birthYear: 1990 },
  { firstName: 'Pierre', lastName: 'Bernard', gender: 'male', birthYear: 1978 },
  { firstName: 'Sophie', lastName: 'Petit', gender: 'female', birthYear: 1992 },
  { firstName: 'Thomas', lastName: 'Robert', gender: 'male', birthYear: 1982 },
  { firstName: 'Julie', lastName: 'Richard', gender: 'female', birthYear: 1989 },
  { firstName: 'Nicolas', lastName: 'Moreau', gender: 'male', birthYear: 1975 },
  { firstName: '√âmilie', lastName: 'Simon', gender: 'female', birthYear: 1995 },
  { firstName: 'Antoine', lastName: 'Laurent', gender: 'male', birthYear: 1980 },
  { firstName: 'Camille', lastName: 'Michel', gender: 'female', birthYear: 1993 },
  { firstName: 'Alexandre', lastName: 'Leroy', gender: 'male', birthYear: 1977 },
  { firstName: 'Chlo√©', lastName: 'Roux', gender: 'female', birthYear: 1991 },
  { firstName: 'Fran√ßois', lastName: 'David', gender: 'male', birthYear: 1983 },
  { firstName: 'Lucie', lastName: 'Bertrand', gender: 'female', birthYear: 1988 },
  { firstName: 'Maxime', lastName: 'Vincent', gender: 'male', birthYear: 1979 },
  { firstName: 'Manon', lastName: 'Fournier', gender: 'female', birthYear: 1994 },
  { firstName: 'Philippe', lastName: 'Morel', gender: 'male', birthYear: 1981 },
  { firstName: 'Clara', lastName: 'Girard', gender: 'female', birthYear: 1987 },
  { firstName: 'Julien', lastName: 'Bonnet', gender: 'male', birthYear: 1976 },
  { firstName: 'Aur√©lie', lastName: 'Lambert', gender: 'female', birthYear: 1996 },
  { firstName: 'Mathieu', lastName: 'Fontaine', gender: 'male', birthYear: 1984 },
  { firstName: 'C√©line', lastName: 'Rousseau', gender: 'female', birthYear: 1990 },
  { firstName: 'S√©bastien', lastName: 'Mercier', gender: 'male', birthYear: 1978 },
  { firstName: 'Sarah', lastName: 'Blanc', gender: 'female', birthYear: 1992 },
  { firstName: 'Olivier', lastName: 'Guerin', gender: 'male', birthYear: 1982 },
  { firstName: 'Pauline', lastName: 'Perrin', gender: 'female', birthYear: 1989 },
  { firstName: 'Guillaume', lastName: 'Faure', gender: 'male', birthYear: 1975 },
  { firstName: 'Audrey', lastName: 'Roussel', gender: 'female', birthYear: 1995 },
  { firstName: 'Romain', lastName: 'Henry', gender: 'male', birthYear: 1980 },
  { firstName: 'Caroline', lastName: 'Gautier', gender: 'female', birthYear: 1993 },
  { firstName: 'Lo√Øc', lastName: 'Durand', gender: 'male', birthYear: 1977 },
  { firstName: 'Marion', lastName: 'Andre', gender: 'female', birthYear: 1991 },
  { firstName: 'David', lastName: 'Lefebvre', gender: 'male', birthYear: 1983 },
  { firstName: 'Mathilde', lastName: 'Garcia', gender: 'female', birthYear: 1988 },
  { firstName: 'Florian', lastName: 'Masson', gender: 'male', birthYear: 1979 },
  { firstName: 'M√©lanie', lastName: 'Colin', gender: 'female', birthYear: 1994 },
  { firstName: 'Beno√Æt', lastName: 'Brun', gender: 'male', birthYear: 1981 },
  { firstName: 'Laurence', lastName: 'Chevalier', gender: 'female', birthYear: 1987 },
  { firstName: 'Michel', lastName: 'Leroux', gender: 'male', birthYear: 1976 },
  { firstName: 'Nathalie', lastName: 'Renaud', gender: 'female', birthYear: 1986 }
];

// Contenus de publication
const postContents = [
  "J'ai pass√© un super weekend √† la montagne ! Les paysages √©taient magnifiques. #montagne #nature",
  "Nouveau projet en cours, tr√®s excit√© de vous montrer les r√©sultats bient√¥t ! #travail #innovation",
  "Recette du jour : lasagnes maison. Simple mais d√©licieux ! #cuisine #recette",
  "Concert incroyable hier soir, quelle ambiance ! #musique #concert",
  "Premi√®re journ√©e au nouveau travail. √âquipe super accueillante ! #travail #nouveaud√©part",
  "Road trip en pr√©paration pour cet √©t√©. Des suggestions d'itin√©raires ? #voyage #roadtrip",
  "Journ√©e sportive : 10km de course √† pied ce matin. Fatigu√© mais heureux ! #sport #running",
  "Lecture du moment : 'Sapiens' de Yuval Noah Harari. Fascinant ! #lecture #livre",
  "S√©ance cin√©ma en famille aujourd'hui. Film g√©nial ! #cinema #famille",
  "Visite du mus√©e d'art moderne hier. Exposition incroyable. #art #culture",
  "Nouveau gadget tech : tellement pratique au quotidien ! #technologie #innovation",
  "Randonn√©e dans le parc national : paysages √† couper le souffle ! #nature #randonn√©e",
  "Cuisine exp√©rimentale ce weekend : test d'une recette asiatique. #cuisine #asiatique",
  "Moment d√©tente : m√©ditation au lever du soleil. Parfait pour commencer la journ√©e. #bien√™tre #m√©ditation",
  "Anniversaire surprise pour mon meilleur ami. Sa r√©action √©tait g√©niale ! #amiti√© #f√™te",
  "Nouveau caf√© d√©couvert dans le quartier. Le meilleur espresso ! #caf√© #d√©couverte",
  "R√©novation de la maison : la cuisine est enfin termin√©e ! #d√©co #bricolage",
  "Sortie en mer aujourd'hui : dauphins aper√ßus ! Moment magique. #mer #animaux",
  "Formation professionnelle cette semaine. Tant de choses √† apprendre ! #formation #carri√®re",
  "Soir√©e jeux de soci√©t√© entre amis. Fou rire garanti ! #jeuxdesoci√©t√© #amis"
];

// Commentaires
const comments = [
  "Superbe photo ! J'adore üòç",
  "F√©licitations ! C'est une super nouvelle !",
  "√áa a l'air d√©licieux, tu pourrais partager la recette ?",
  "Trop cool ! J'aimerais y aller aussi !",
  "Merci pour ce partage, c'est tr√®s inspirant.",
  "Je suis totalement d'accord avec toi !",
  "C'est vraiment impressionnant !",
  "Tu as bien raison, profite bien !",
  "√áa me donne envie d'essayer aussi !",
  "G√©nial ! Continue comme √ßa !",
  "J'ai eu la m√™me exp√©rience r√©cemment.",
  "C'est exactement ce dont j'avais besoin aujourd'hui.",
  "Quelle chance ! Profite bien de ce moment.",
  "Je te suis dans cette aventure !",
  "C'est toujours un plaisir de voir tes publications.",
  "Tu as beaucoup de talent !",
  "Tr√®s belle perspective, merci pour ce partage.",
  "√áa me rappelle de bons souvenirs.",
  "J'aimerais avoir ton avis sur ce sujet.",
  "Tu m'as donn√© une super id√©e !"
];

// Fonction pour t√©l√©charger les images
async function downloadImage(url, localPath) {
  try {
    const response = await axios({
      method: 'GET',
      url: url,
      responseType: 'arraybuffer'
    });
    
    await fs.mkdir(path.dirname(localPath), { recursive: true });
    await fs.writeFile(localPath, Buffer.from(response.data));
    
    return true;
  } catch (error) {
    console.error(`Erreur lors du t√©l√©chargement de l'image ${url}:`, error.message);
    return false;
  }
}

// Fonction principale pour initialiser la base de donn√©es avec des donn√©es fictives
async function seedDatabase() {
  console.log("Initialisation de la base de donn√©es...");
  
  // Initialiser la base de donn√©es
  await initDB();
  
  // Cr√©er le dossier pour les images t√©l√©charg√©es
  const uploadsDir = path.join(__dirname, '../public/uploads');
  await fs.mkdir(uploadsDir, { recursive: true });
  
  console.log("T√©l√©chargement des avatars...");
  // T√©l√©charger les avatars
  const avatarPaths = [];
  for (let i = 0; i < AVATAR_URLS.length; i++) {
    const localPath = path.join(uploadsDir, `avatar-${i + 1}.jpg`);
    const success = await downloadImage(AVATAR_URLS[i], localPath);
    if (success) {
      avatarPaths.push(`/uploads/avatar-${i + 1}.jpg`);
    }
  }
  
  console.log("T√©l√©chargement des images pour les publications...");
  // T√©l√©charger les images pour les publications
  const postImagePaths = [];
  for (let i = 0; i < POST_IMAGE_URLS.length; i++) {
    const localPath = path.join(uploadsDir, `post-image-${i + 1}.jpg`);
    const success = await downloadImage(POST_IMAGE_URLS[i], localPath);
    if (success) {
      postImagePaths.push(`/uploads/post-image-${i + 1}.jpg`);
    }
  }
  
  console.log("Cr√©ation des utilisateurs...");
  // Cr√©er les utilisateurs
  const createdUsers = [];
  for (let i = 0; i < userData.length; i++) {
    const user = userData[i];
    const avatarIndex = i % avatarPaths.length;
    
    try {
      const newUser = await users.create({
        firstName: user.firstName,
        lastName: user.lastName,
        email: `${user.firstName.toLowerCase()}.${user.lastName.toLowerCase()}@example.com`,
        password: 'password123',
        dateOfBirth: new Date(user.birthYear, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
        gender: user.gender,
        avatar: avatarPaths[avatarIndex]
      });
      
      createdUsers.push(newUser);
      console.log(`Utilisateur cr√©√©: ${newUser.firstName} ${newUser.lastName}`);
    } catch (error) {
      console.error(`Erreur lors de la cr√©ation de l'utilisateur ${user.firstName} ${user.lastName}:`, error.message);
    }
  }
  
  // Ajouter des amis al√©atoires
  console.log("Ajout d'amis entre utilisateurs...");
  for (const user of createdUsers) {
    // Choisir un nombre al√©atoire d'amis pour chaque utilisateur
    const friendCount = Math.floor(Math.random() * 15) + 5; // Entre 5 et 20 amis
    const potentialFriends = createdUsers.filter(u => u._id !== user._id);
    
    const shuffled = [...potentialFriends].sort(() => 0.5 - Math.random());
    const selectedFriends = shuffled.slice(0, friendCount);
    
    for (const friend of selectedFriends) {
      try {
        // V√©rifier si l'amiti√© existe d√©j√†
        if (!user.friends.includes(friend._id)) {
          await users.update(user._id, {
            friends: [...user.friends, friend._id]
          });
          
          // Ajouter l'amiti√© dans l'autre sens √©galement
          if (!friend.friends.includes(user._id)) {
            await users.update(friend._id, {
              friends: [...friend.friends, user._id]
            });
          }
        }
      } catch (error) {
        console.error(`Erreur lors de l'ajout d'ami entre ${user.firstName} et ${friend.firstName}:`, error.message);
      }
    }
  }
  
  console.log("Cr√©ation des publications...");
  // Cr√©er les publications (10 publiques et 10 priv√©es)
  const createdPosts = [];
  
  // Cr√©er 10 publications publiques
  for (let i = 0; i < 10; i++) {
    const randomUserIndex = Math.floor(Math.random() * createdUsers.length);
    const user = createdUsers[randomUserIndex];
    const contentIndex = i % postContents.length;
    const useImage = Math.random() > 0.3; // 70% de chance d'avoir une image
    
    const images = [];
    if (useImage) {
      const randomImageIndex = Math.floor(Math.random() * postImagePaths.length);
      images.push(postImagePaths[randomImageIndex]);
    }
    
    try {
      const newPost = await posts.create({
        user: user._id,
        content: postContents[contentIndex],
        images,
        isPrivate: false
      });
      
      createdPosts.push(newPost);
      console.log(`Publication publique cr√©√©e par ${user.firstName}`);
    } catch (error) {
      console.error(`Erreur lors de la cr√©ation d'une publication publique:`, error.message);
    }
  }
  
  // Cr√©er 10 publications priv√©es
  for (let i = 0; i < 10; i++) {
    const randomUserIndex = Math.floor(Math.random() * createdUsers.length);
    const user = createdUsers[randomUserIndex];
    const contentIndex = (i + 10) % postContents.length;
    const useImage = Math.random() > 0.3; // 70% de chance d'avoir une image
    
    const images = [];
    if (useImage) {
      const randomImageIndex = Math.floor(Math.random() * postImagePaths.length);
      images.push(postImagePaths[randomImageIndex]);
    }
    
    try {
      const newPost = await posts.create({
        user: user._id,
        content: postContents[contentIndex],
        images,
        isPrivate: true
      });
      
      createdPosts.push(newPost);
      console.log(`Publication priv√©e cr√©√©e par ${user.firstName}`);
    } catch (error) {
      console.error(`Erreur lors de la cr√©ation d'une publication priv√©e:`, error.message);
    }
  }
  
  console.log("Ajout de j'aimes et commentaires aux publications...");
  // Ajouter des j'aimes et des commentaires al√©atoires aux publications
  for (const post of createdPosts) {
    // Ajouter des j'aimes
    const likeCount = Math.floor(Math.random() * 20) + 1; // Entre 1 et 20 j'aimes
    const shuffledUsers = [...createdUsers].sort(() => 0.5 - Math.random());
    const likingUsers = shuffledUsers.slice(0, likeCount);
    
    const likes = likingUsers.map(u => u._id);
    
    // Ajouter des commentaires
    const commentCount = Math.floor(Math.random() * 5) + 1; // Entre 1 et 5 commentaires
    const commentingUsers = shuffledUsers.slice(0, commentCount);
    
    const postComments = [];
    for (let i = 0; i < commentCount; i++) {
      const user = commentingUsers[i];
      const commentIndex = Math.floor(Math.random() * comments.length);
      
      postComments.push({
        user: user._id,
        content: comments[commentIndex]
      });
    }
    
    try {
      await posts.update(post._id, {
        likes,
        comments: postComments
      });
      
      console.log(`Ajout√© ${likes.length} j'aimes et ${postComments.length} commentaires √† une publication`);
    } catch (error) {
      console.error(`Erreur lors de l'ajout de j'aimes et commentaires:`, error.message);
    }
  }
  
  console.log("Initialisation de la base de donn√©es termin√©e avec succ√®s !");
  console.log(`${createdUsers.length} utilisateurs cr√©√©s`);
  console.log(`${createdPosts.length} publications cr√©√©es`);
  console.log("Vous pouvez maintenant vous connecter avec n'importe quel utilisateur cr√©√©.");
  console.log("Email: prenom.nom@example.com | Mot de passe: password123");
}

// Ex√©cuter la fonction d'initialisation
seedDatabase().catch(error => {
  console.error("Erreur lors de l'initialisation de la base de donn√©es:", error);
});
